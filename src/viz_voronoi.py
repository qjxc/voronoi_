#!/usr/bin/env python3
"""
Standalone Voronoi Visualization Script

Usage:
    Place this file in the same directory as `voronoi_data.npz` (generated by the preprocessing script).
    Then run:
        python viz_voronoi.py

This script will load the Voronoi data and render the plate map.
"""
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import PolyCollection


def load_data(npz_path):
    """
    Load Voronoi data from a .npz file.

    Parameters:
        npz_path (str): Path to the .npz file containing 'points', 'vertices', and 'region_indices'.

    Returns:
        tuple:
            points (ndarray): Array of seed points, shape (N, 2).
            vertices (ndarray): Array of Voronoi vertices, shape (M, 2).
            region_indices (ndarray): Object array of integer lists, each list is indices of vertices for one region.
    """
    data = np.load(npz_path, allow_pickle=True)
    return data['points'], data['vertices'], data['region_indices']


def build_regions(vertices, region_indices):
    """
    Construct polygon coordinate lists for each Voronoi region.

    Parameters:
        vertices (ndarray): Voronoi vertices.
        region_indices (ndarray): Object array of vertex-index lists.

    Returns:
        list of ndarray: Each element is an array of shape (K, 2) giving the polygon vertices.
    """
    return [vertices[indices] for indices in region_indices]


def visualize(points, regions, save_path=None):
    """
    Render the Voronoi plate map.

    Parameters:
        points (ndarray): Seed points.
        regions (list of ndarray): Voronoi region polygons.
        save_path (str, optional): If provided, saves the figure to this path.
    """
    # Random colors for each region
    colors = np.random.rand(len(regions), 3)

    fig, ax = plt.subplots(figsize=(8, 8))
    collection = PolyCollection(regions, facecolors=colors, edgecolors='k', linewidths=0.5)
    ax.add_collection(collection)

    # Plot seed points
    ax.plot(points[:, 0], points[:, 1], 'ko', markersize=3)

    # Auto-scale
    x_min, x_max = points[:, 0].min(), points[:, 0].max()
    y_min, y_max = points[:, 1].min(), points[:, 1].max()
    ax.set_xlim(x_min, x_max)
    ax.set_ylim(y_min, y_max)
    ax.set_aspect('equal')

    ax.set_title('Voronoi Plate Map')
    plt.tight_layout()

    if save_path:
        plt.savefig(save_path, dpi=300)
    plt.show()


def main():
    base_dir = os.path.dirname(__file__)
    npz_path = os.path.join(base_dir, '../data/voronoi_data.npz')

    # Load and build
    points, vertices, region_indices = load_data(npz_path)
    regions = build_regions(vertices, region_indices)

    # Visualize
    visualize(points, regions)


if __name__ == '__main__':
    main()
